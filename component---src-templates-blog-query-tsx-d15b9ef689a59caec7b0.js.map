{"version":3,"file":"component---src-templates-blog-query-tsx-d15b9ef689a59caec7b0.js","mappings":"4YA+BA,IAjBiB,SAAC,GAAwB,IAAtBA,EAAsB,EAAtBA,KAClB,GAA+BC,EAAAA,EAAAA,KAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,QAAC,WAAD,KACGH,EAAKI,KAAI,SAACC,EAAKC,GAAN,OACR,QAAC,WAAD,CAAgBC,IAAKF,EAAIG,QACpBF,GAAF,MACD,QAAC,EAAAG,KAAD,CAAMC,GAAI,SAACC,GAAD,a,qWAAA,cAAaA,EAAEC,cAAf,aAAa,EAAUC,IAAMC,IAAIC,EAAAA,EAAAA,GAAe,IAAIZ,EAAL,IAAiBD,EAAjB,IAA6BG,EAAIG,OACvFH,EAAIW,a,+rBCDjB,IAiBA,EAjBqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,SAAAA,OAAT,gBACnB,QAAC,KAAD,CAAKC,GAAI,IACP,QAAC,EAAAV,KAAD,CAAMK,GAAIG,EAAKT,KAAME,GAAI,SAACC,GAAD,8BAAaA,EAAEC,cAAf,aAAa,EAAUC,GAAvB,IAA0BO,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAO,WAC5EJ,EAAKK,QAER,aAAGZ,GAAI,CAAEW,MAAO,YAAaE,GAAI,EAAGV,EAAG,CAAEQ,MAAO,aAAeD,SAAU,CAAC,EAAG,EAAG,MAC9E,oBAAOH,EAAKO,MACXP,EAAKjB,MAAQkB,IACZ,QAAC,WAAD,YAEE,QAAC,IAAD,CAAUlB,KAAMiB,EAAKjB,WCF/B,EARgB,SAAC,GAAD,IAAGyB,EAAH,EAAGA,MAAH,IAAUC,UAAAA,OAAV,eAA0BR,SAAAA,OAA1B,gBACd,mBAASR,GAAI,CAAES,GAAI,CAAC,EAAG,EAAG,IAAMO,UAAWA,GACxCD,EAAMrB,KAAI,SAACa,GAAD,OACT,QAAC,EAAD,CAAcV,IAAKU,EAAKT,KAAMS,KAAMA,EAAMC,SAAUA,U,6uBCA1D,IAAMS,EAAO,SAAC,GAA0B,IAAxBF,EAAwB,EAAxBA,MACd,GAA+BxB,EAAAA,EAAAA,KAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,QAAC,IAAD,MACE,QAAC,IAAD,CAAKmB,MAAM,UACX,QAAC,KAAD,CAAMZ,GAAI,CAAEkB,WAAY,SAAUC,eAAgB,gBAAiBC,SAAU,UAC3E,QAAC,KAAD,CAASC,GAAG,KAAKC,QAAQ,YAAYtB,GAAI,CAAEuB,QAAS,IAApD,SAGA,QAAC,EAAAxB,KAAD,CACEC,GAAI,SAACC,GAAD,8BAAaA,EAAEC,cAAf,aAAa,EAAUC,GAAvB,IAA0BmB,QAAS,kBAAmBC,QAAS,KACnEnB,IAAIC,EAAAA,EAAAA,GAAe,IAAIZ,EAAL,IAAiBD,IAFrC,UAOF,QAAC,IAAD,CAASuB,MAAOA,EAAOf,GAAI,CAAEa,GAAI,CAAC,EAAG,QCvC3C,MDqDe,YAAkD,IAAhBW,EAAgB,oBAErDC,EACND,EADFE,KAAQD,QAGV,OAAO,QAACR,EAAD,eAAMF,MAAOU,EAAQE,OAAWH","sources":["webpack://swordman/./src/components/item-tags.tsx","webpack://swordman/./src/components/blog-list-item.tsx","webpack://swordman/./src/components/listing.tsx","webpack://swordman/./src/components/blog.tsx","webpack://swordman/./src/templates/blog-query.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport * as React from \"react\"\nimport { jsx, Box } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <Link to={post.slug} sx={(t) => ({ ...t.styles?.a, fontSize: [1, 2, 3], color: `text` })}>\n      {post.title}\n    </Link>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx, ThemeUIStyleObject } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n  sx?: ThemeUIStyleObject\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","/** @jsx jsx */\nimport { jsx, Heading, Flex } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout\"\nimport Listing from \"./listing\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport Seo from \"./seo\"\n\n\ntype PostsProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n}\n\nconst Blog = ({ posts }: PostsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <Layout>\n      <Seo title=\"我的文章\" />\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between`, flexFlow: `wrap` }}>\n        <Heading as=\"h1\" variant=\"styles.h1\" sx={{ marginY: 2 }}>\n          我的文章\n        </Heading>\n        <Link\n          sx={(t) => ({ ...t.styles?.a, variant: `links.secondary`, marginY: 2 })}\n          to={replaceSlashes(`/${basePath}/${tagsPath}`)}\n        >\n          文章标签\n        </Link>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  )\n}\n\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreBlog({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Blog posts={allPost.nodes} {...props} />\n}\n","import { graphql } from \"gatsby\"\nimport BlogComponent from \"../components/blog\"\n\nexport default BlogComponent\n\nexport const query = graphql`\n  query ($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n"],"names":["tags","useMinimalBlogConfig","tagsPath","basePath","map","tag","i","key","slug","Link","sx","t","styles","a","to","replaceSlashes","name","post","showTags","mb","fontSize","color","title","mt","date","posts","className","Blog","alignItems","justifyContent","flexFlow","as","variant","marginY","props","allPost","data","nodes"],"sourceRoot":""}